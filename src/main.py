import curses
from curses import wrapper

#TODO: colisão do player
#TODO: adicionar novos inimigos
#TODO: adicionar o boss
#TODO: opções

def main(stdsrc):
    global WIN_Y, WIN_X
    WIN_Y = 35
    WIN_X = 135

    global PLAYER_X, PLAYER_Y, PLAYER_DIRECTION, PLAYER_DMG, PLAYER_HP, PLAYER_INVENTORY
    PLAYER_X = 5
    PLAYER_Y = 5
    PLAYER_DIRECTION = "up"
    PLAYER_DMG = 1
    PLAYER_HP = [10, 10]
    PLAYER_INVENTORY = []

    global ENEMY_DIRECTION, ENEMY_DMG, ENEMY_HP
    ENEMY_HP = 3
    ENEMY_DMG = 1
    ENEMY_DIRECTION = "up"

    ENEMY_1 = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [5, 7], 'direction': ENEMY_DIRECTION}
    ENEMY_2 = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [20, 7], 'direction': ENEMY_DIRECTION}
    ENEMY_3 = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [12, 28], 'direction': ENEMY_DIRECTION}
    ENEMY_4 = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [12, 113], 'direction': ENEMY_DIRECTION}
    ENEMY_5 = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [19, 78], 'direction': ENEMY_DIRECTION}
    ENEMIES_M1 = [ENEMY_1,ENEMY_2,ENEMY_3,ENEMY_4,ENEMY_5]

    ENEMY_A = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [24, 50], 'direction': ENEMY_DIRECTION}
    ENEMY_B = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [22, 20], 'direction': ENEMY_DIRECTION}
    ENEMY_C = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [0, 78], 'direction': ENEMY_DIRECTION}
    ENEMY_D = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [0, 8], 'direction': ENEMY_DIRECTION}
    ENEMY_E = {'hp':ENEMY_HP, 'dmg': ENEMY_DMG, 'origin': [18, 111], 'direction': ENEMY_DIRECTION}
    ENEMIES_M2 = [ENEMY_A,ENEMY_B,ENEMY_C,ENEMY_D,ENEMY_E]
    ENEMIES = [ENEMIES_M1, ENEMIES_M2]

    stdsrc.nodelay(True)

    try:
        curses.curs_set(0)
    except:
        pass

    splash_screen(stdsrc)
    curses.napms(2000)
    stdsrc.clear()
    stdsrc.refresh()
    stdsrc.clear()
    window = curses.newwin(WIN_Y, WIN_X)
    window.keypad(True)
    choice = menu(window)
    if choice == 0:
        mapa = 0
    else:
        mapa = 1 
    window.nodelay(True)

    PLAYER_Y, PLAYER_X = set_player_origin(choice)

    key = 0
    while True:
        curses.resize_term(35,135)
        get_menu_choice(choice, window)
        player_draw_sprite(window)
        #window.addch(".")
        #window.refresh
        #print(window.instr(4, 6, 0))
        #curses.napms(1000)
        get_enemies(window, ENEMIES, mapa)

        try:
            key = stdsrc.getkey()
        except:
            key = None

        if key != None:
            if key == "q":
                print("you quit") # change to a centered message
                curses.napms(1000) 
                break
            
            
            window.erase()
            player_origin = player_walk(key, window)
            PLAYER_Y = player_origin[0]
            PLAYER_X = player_origin[1]
            PLAYER_DIRECTION = player_origin[2]
            player_draw_sprite(window)
            
            enemy_att_turn(ENEMIES, mapa)
            '''
            if ENEMY_HP > 0:
                window.addstr(ENEMY_Y, ENEMY_X, "@")
                if enemy_attack(ENEMY_Y, ENEMY_X, PLAYER_Y, PLAYER_X) == True:
                    PLAYER_HP[0] -= ENEMY_DMG
            '''

            '''
            if key == "x":
                if ([ENEMY_Y, ENEMY_X] == player_attack(PLAYER_Y, PLAYER_X, PLAYER_DIRECTION)):
                    ENEMY_HP -= PLAYER_DMG
            '''
                     
            if key == "z":
                player_use(window, PLAYER_Y, PLAYER_X, PLAYER_DIRECTION, PLAYER_INVENTORY)
                stdsrc.addstr(0,0, str(PLAYER_INVENTORY))

        if PLAYER_HP[0] <= 0:
            game_over(window)
            break
        
        window.refresh()
        window.border()
        stdsrc.refresh()

### MISC ####
def get_menu_choice(choice, win):
    if choice == 0:
        draw_map1(win)
    elif choice == 1:
        draw_map2(win)
    elif choice == 2:
        #return options(win)
        return 3
    return 3
#############

## PLAYER ###
def player_draw_sprite(win):
    switcher = {
        "up":"^",
        "down":"v",
        "left": "<",
        "right": ">"
            }
    curr_sprite = switcher.get(PLAYER_DIRECTION, "invalid direction error")
    win.addstr(PLAYER_Y, PLAYER_X, curr_sprite)


def player_walk(key, win):
    global_var = globals()
    if key == "KEY_LEFT" and  0 != global_var['PLAYER_X'] - 1:
        global_var['PLAYER_X'] -= 1
        global_var["PLAYER_DIRECTION"] = "left"
        return [global_var['PLAYER_Y'], global_var["PLAYER_X"], global_var["PLAYER_DIRECTION"]]
    elif key == "KEY_RIGHT" and  global_var["WIN_X"] != global_var["PLAYER_X"] + 2:
        global_var["PLAYER_X"] += 1
        global_var['PLAYER_DIRECTION'] = "right"
        return [global_var['PLAYER_Y'], global_var['PLAYER_X'], global_var['PLAYER_DIRECTION']]
    elif key == "KEY_UP" and  0 != global_var['PLAYER_Y'] - 1:
        global_var['PLAYER_Y'] -= 1
        global_var['PLAYER_DIRECTION'] = "up"
        return [global_var['PLAYER_Y'], global_var['PLAYER_X'], global_var['PLAYER_DIRECTION']]
    elif key == "KEY_DOWN" and  global_var['WIN_Y'] != global_var['PLAYER_Y'] + 2:
        global_var['PLAYER_Y'] += 1
        global_var['PLAYER_DIRECTION'] = "down"
        return [global_var['PLAYER_Y'], global_var['PLAYER_X'], global_var['PLAYER_DIRECTION']]
    else:
        return [global_var['PLAYER_Y'], global_var['PLAYER_X'], global_var['PLAYER_DIRECTION']]


def player_attack(player_y, player_x, player_direction):
    switcher = {
        "up":[player_y - 1, player_x],
        "down":[player_y + 1, player_x],
        "left": [player_y, player_x - 1],
        "right": [player_y, player_x + 1]
            }
    return switcher.get(player_direction, "invalid direction")


def player_use(win, player_y, player_x, player_direction, player_inventory):
    switcher_ver = {
        "up": int(player_y - 1),
        "down": int(player_y + 1)
            }
    switcher_hor = {
        "left": int(player_x - 1),
        "right": int(player_x + 1)
    }
    coord_y = switcher_ver.get(player_direction, - 1)
    coord_x = switcher_hor.get(player_direction, - 1)

    visualized_vertical = win.inch(coord_y, int(player_x))
    visualized_horizontal = win.inch(int(player_y) ,coord_x)

    if (visualized_horizontal == curses.ACS_DIAMOND) or (visualized_vertical == curses.ACS_DIAMOND):
        player_inventory.append(win.inch(coord_y, int(player_x)))
    else:
        return False


def set_player_origin(choice):
    if choice == 1:
        return 6, 10
    else:
        return PLAYER_Y, PLAYER_X

#old player collision
'''
def player_collides(win, y, x):
    #collides = ["@","─","┌", "┐", "└", "┘", "│", " ", ""]
    sprite = win.inch(y,x) 
    #ch = chr(sprite & 255)
    if sprite != curses.ACS_VLINE:
        return True
    else:
        return False
''' 
##############

#### ENEMY ####
def enemy_draw(win, y, x, sprite):
    win.addstr(y, x, sprite)


def enemy_attack(enemy_y, enemy_x, player_y, player_x):
    for i in range(enemy_y - 1, enemy_y + 2):
            for j in range(enemy_x - 1, enemy_y + 2):
                if [player_y, player_x] == [i, j]:
                    return True
                else:
                    continue


def get_enemies(win, enemy_list, mapa):
    i = 0
    for enemy in enemy_list[mapa]:
        i += 1
        enemy_y = enemy['origin'][0] + i
        enemy_x = enemy['origin'][1] + i
        if enemy['hp'] > 0:
            win.addstr(enemy_y, enemy_x, "@")
            win.refresh()
            

def enemy_att_turn(enemy_list, mapa):
    i = 0
    for enemy in enemy_list[mapa]:
        i += 1
        enemy_y = enemy['origin'][0] + i
        enemy_x = enemy['origin'][1] + i
        if enemy_attack(enemy_y, enemy_x, PLAYER_Y, PLAYER_X) == True:
                PLAYER_HP[0] -= enemy['dmg']
###############

#### MAPA1 ####
def draw_map1(win):
    draw_room_map1(win)
    draw_corr_map1(win)


def draw_room_map1(win):
    numero_salas = 7

    dimensoes_salas = [
        [8,16], #[y,x]
        [9,13],
        [10,15], 
        [6,30],
        [15,15],
        [8,23],
        [8,24] 
    ]

    coordenadas_salas = [
        [3,5], 
        [22,35],
        [19,5], 
        [3,65],
        [13,110],
        [9,30],
        [18,68] 
    ]

    for i in range(numero_salas):
        altura = dimensoes_salas[i][0]
        comprimento = dimensoes_salas[i][1]
        y = coordenadas_salas[i][0]
        x = coordenadas_salas[i][1]

    
        for i in range(y, y + altura):
            win.addstr(i, x, '.' * comprimento) 
        
        window = win.subwin(altura+2, comprimento+2, y-1, x-1)
        window.border()


def draw_corr_map1(win):
    dimensoes_vertical = [
            (6), 
            (2), 
            (3), 
            (9),
            (2), 
            (2), 
            (3),
            (2),
            (5), 
            (2), 
        ]

    coordenadas_vertical = [
        [11,6],
        [17,18],
        [29,6],
        [23,27],
        [29,78],
        [28,124],
        [10,111],
        [8,105],
        [4,30],
        [16,69]
    ]

    dimensoes_horizontal = [
        (12),
        (20),
        (8), 
        (30), 
        (45),
        (6),
        (10), 
        (35), 
        (16), 
    ]

    coordenadas_horizontal = [
        [16,7],
        [31,7],
        [22,27],
        [30,48],
        [29,79],
        [10,105],
        [8,95],
        [3,30],
        [16,53]
    ]
    
    for j in range(len(coordenadas_vertical)):

        vertical = dimensoes_vertical[j]
        y_vertical = coordenadas_vertical[j][0]
        x_vertical = coordenadas_vertical[j][1]

        for i in range(y_vertical, y_vertical + vertical):
            win.addstr(i,x_vertical, ".")
        
    for k in range(len(coordenadas_horizontal)):

        horizontal = dimensoes_horizontal[k]
        y_horizontal = coordenadas_horizontal[k][0]
        x_horizontal = coordenadas_horizontal[k][1]

        #imprimindo corredor horizontal
        for i in range(x_horizontal, x_horizontal+horizontal):
            win.addstr(y_horizontal,i, ".")
###############

#### MAPA2 ####
def draw_map2(win):
    draw_room_map2(win)
    draw_corr_map2(win)


def draw_room_map2(win):
    numero_salas = 5

    dimensoes_salas = [
        [8,16], #[y,x]
        [10,15],
        [6,30],
        [15,15],
        [8,24]
    ]

    coordenadas_salas = [
        [4,10], 
        [19,10], 
        [3,65],
        [13,110],
        [20,50]
        
    ]

    for i in range(numero_salas):

        altura = dimensoes_salas[i][0]
        comprimento = dimensoes_salas[i][1]
        y = coordenadas_salas[i][0]
        x = coordenadas_salas[i][1]


        for i in range(y, y + altura):
            win.addstr(i, x, '.' * comprimento) 

        
        window = win.subwin(altura+2, comprimento+2, y-1, x-1)
        window.border()


def draw_corr_map2(win):
    dimensoes_vertical = [
    (8), 
    (2), 
    (9),
    (3), 
    (2), 
    (3),
    (2),
    (5), 
    (5),
    ]

    coordenadas_vertical = [
        [9,6],
        [17,18],
        [23,27],
        [29,12],
        [28,124],
        [10,111],
        [8,105],
        [4,30],
        [25,79]
    ]

    dimensoes_horizontal = [
        (12),
        (15),
        (23), 
        (2),
        (5), 
        (45),
        (6),
        (10), 
        (35), 
        (6), 
    ]

    coordenadas_horizontal = [
        [16,7],
        [31,13],
        [22,27],
        [9,8],
        [8,26],
        [29,79],
        [10,105],
        [8,95],
        [3,30],
        [24,74],
    ]

    for j in range(len(coordenadas_vertical)):

        vertical = dimensoes_vertical[j]
        y_vertical = coordenadas_vertical[j][0]
        x_vertical = coordenadas_vertical[j][1]

        for i in range(y_vertical, y_vertical + vertical):
            win.addstr(i,x_vertical, ".")
        
        
    for k in range(len(coordenadas_horizontal)):

        horizontal = dimensoes_horizontal[k]
        y_horizontal = coordenadas_horizontal[k][0]
        x_horizontal = coordenadas_horizontal[k][1]

        for i in range(x_horizontal, x_horizontal + horizontal):
            win.addstr(y_horizontal,i, ".")
###############

#### POPUP ####
def game_over(win):
    win.clear()
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    RED_AND_BLACK = curses.color_pair(1)

    gameOver = "GAME OVER!!"
    y,x = win.getmaxyx()

    y= y//2
    x = x//2-len(gameOver)
    i = 5
    while i < 10:
        win.refresh()

        win.addstr(y,x, gameOver)

        win.refresh()
        curses.napms(1000)

        win.attron(RED_AND_BLACK)
        win.addstr(y,x, gameOver)
        win.attroff(RED_AND_BLACK)

        win.refresh()
        curses.napms(1000)
        i += 1


def you_won(win):
    win.clear()
    curses.curs_set(0)
    curses.resize_term(35,135)

    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
    GREEN_AND_BLACK = curses.color_pair(1)

    youWon = "YOU WON!!"
    y,x = win.getmaxyx()

    y= y//2
    x = x//2-len(youWon)

    i = 5
    while i < 10:

        win.refresh()

        win.addstr(y,x, youWon)

        win.refresh()
        curses.napms(1000)

        win.attron(GREEN_AND_BLACK)
        win.addstr(y,x, youWon)
        win.attroff(GREEN_AND_BLACK)

        win.refresh()
        curses.napms(1000)
        i += 1
###############

#SPLASH_SCREEN#
def splash_screen(stdscr):
    stdscr.clear()
    
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_WHITE)
    WHITE = curses. color_pair(1)
    curses.init_pair(2,curses.COLOR_GREEN, curses.COLOR_GREEN)
    GREEN = curses.color_pair(2)
    curses.init_pair(3, curses.COLOR_GREEN, curses.COLOR_GREEN)
    GREEN = curses.color_pair(3)
    curses.init_pair(4, curses.COLOR_MAGENTA, curses.COLOR_MAGENTA)
    MAGENTA = curses.color_pair(4)

    # medindo o tamanho total do terminal
    alturaDaTela, comprimentoDaTela = stdscr.getmaxyx()

    # array com o texto
    texto = [
            ["#","#","#","#","#","#","#","#","#","#"," "," "," "," "," ","#","#","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#"," "," "," "," "," "," ","#","#","#"," "," ","#","#","#","#","#","#","#","#","#"],
            ["#","#","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#"," "," "," "," "," "," ","#","#","#"," "," ","#","#","#","#","#","#","#","#","#"],
            ["#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "," "," "," "," ","#","#","#"," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "],
            ["#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "," "," "," "," ","#","#","#"," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "],
            ["#","#","#","#","#","#","#","#","#","#"," "," "," "," "," ","#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," ","#","#","#","#"," "," ","#","#","#"," "," "," "," "," "," ","#","#","#"," "," ","#","#","#","#","#","#"," "," "," "],
            ["#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," ","#","#"," "," ","#","#","#"," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "],
            ["#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," ","#","#"," "," ","#","#","#"," "," "," "," "," "," ","#","#","#"," "," ","#","#","#"," "," "," "," "," "," "],
            ["#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#"],
            ["#","#","#"," "," "," "," "," "," "," ","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#","#","#","#"," "," ","#","#","#","#","#","#","#","#","#"]
        ]

    for i in range(len(texto)):
        for j in range(len(texto[i])):
            # posicao que o texto deve aparecer
            alturaDaArray = len(texto)
            comprimentoDaArray = len(texto[i])
            y = (alturaDaTela - alturaDaArray) // 2
            x = (comprimentoDaTela - comprimentoDaArray) // 2

            #coordenadas
            y = y+i
            x = x+j


            #imprimir o nome rogue com atributos
            if texto[i][j]=="#":

                curses.napms(10)
                stdscr.attron(GREEN)
                stdscr.addstr(y+2,x-2, texto[i][j])
                stdscr.attron(GREEN)
                stdscr.attron(MAGENTA)
                stdscr.addstr(y+1,x-1, texto[i][j])
                stdscr.attron(MAGENTA)
                stdscr.attron(WHITE)
                stdscr.addstr(y,x,texto[i][j])
                stdscr.attroff(WHITE)
            else: 
                pass
            stdscr.refresh()

    stdscr.getch()

def splash_screen2(stdscr):
    stdscr.clear()
    curses.curs_set(0)
    if curses.has_colors():
     curses.use_default_colors()
    if curses.can_change_color():
       curses.init_color(
          255,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff
       )

    curses.curs_set(0)
    stdscr.clear()
    
    curses.init_pair(8, curses.COLOR_WHITE, curses.COLOR_WHITE)
    WHITE = curses.color_pair(8)

    # medindo o tamanho total do terminal
    alturaDaTela, comprimentoDaTela = stdscr.getmaxyx()

    # array com o texto
    texto = [
                                                                                            
        [' ',' ',' ',' ',' ','*','*','*','*','*',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*',' ','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*',' ','*','*',' ',' ',' ',' '],
        [' ',' ','*','*','*','*','*','*',' ',' ','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*',' ',' ','*',' ',' ','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*',' ',' ','*','*','*','*',' ','*',' '],
        [' ','*','*',' ',' ',' ','*',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*',' ',' ','*',' ',' ',' ',' ',' ','*','*','*','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*',' ',' ','*',' ','*','*','*','*',' ',' '],
        ['*',' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ','*','*',' ',' ',' '],
        [' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ','*','*','*','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*','*','*','*','*',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*','*','*','*',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ','*','*',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' '],
        [' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*','*','*','*','*','*','*','*','*',' ',' '],
        ['*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ','*','*','*','*','*','*',' ',' ',' ',' ',' '],
        ['*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
    ]
    sword(stdscr)
    for i in range(len(texto)):

        for j in range(len(texto[i])):
            alturaDaArray = len(texto)
            comprimentoDaArray = len(texto[i])
            y = (alturaDaTela - alturaDaArray) // 2
            x = (comprimentoDaTela - comprimentoDaArray) // 2

            y = y+i
            x = x+j

            if texto[i][j]=="*":

                curses.napms(10)
                stdscr.attron(WHITE)
                stdscr.addstr(y,x,texto[i][j])
                stdscr.attroff(WHITE)
            else: 
                pass
            stdscr.refresh()

def sword(stdscr):
    if curses.has_colors():
     curses.use_default_colors()
    if curses.can_change_color():
       curses.init_color(
          255,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff
       )
    curses.init_pair(1,241,241)
    COR1 = curses.color_pair(1)
    curses.init_pair(2,240,240)
    COR2 = curses.color_pair(2)
    curses.init_pair(3,239,239)
    COR3 = curses.color_pair(3)
    curses.init_pair(4,238,238)
    COR4 = curses.color_pair(4)
    curses.init_pair(5, 237, 237)
    COR5 = curses.color_pair(5)
    curses.init_pair(6, 236,236)
    COR6 = curses.color_pair(6)
    

    alturaDaTela, comprimentoDaTela = stdscr.getmaxyx()
    arma = [



        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','^','?','X','X','?','?','X','X','X','X','?','?','X','X',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],








        [' ','>','X','X','X','X','X','?','?','?','X','X','X','X','X','X','X','X','X','X','X','X','X','X','X','X','X','#','?','?','?','X','?','=','=','?','?','=','=','=','=','=','>','>','>','>','>','=','=','>','>','>','=','=','=','=','=','>','=','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','>','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','>','>','>','>','>','>','>','=','?',' ',' '],


        [' ',' ','=','#','?','X','X','X','X','X','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','$','=','?','X','X','X','X','X','^','^','^','^','^','^','^','^','>','>','>','>','>','=','=','>','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','>','>','>','>','>','=','=','=','=','=','=','>','>','>','>','>','>','=','=','=','=','=','=','>','>','>','>','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','=','>','>','>','>','>','>','>','>','?','X','^',' ',' ',' ',' '],



        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','?','?','X','X','?','=','X','X','=','^',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],







    ]

    for i in range(len(arma)):

        for j in range(len(arma[i])):
            alturaDaArray = len(arma)
            comprimentoDaArray = len(arma[i])
            y = (alturaDaTela - alturaDaArray) // 2
            x = (comprimentoDaTela - comprimentoDaArray) // 2

            y = y+i
            x = x+j

            
            
            if arma[i][j] == "X" or arma[i][j] == "$":
                stdscr.addstr(y,x,arma[i][j], COR6)
            else:
                pass
            if arma[i][j] == "?":
                stdscr.addstr(y,x,arma[i][j], COR2)
            else:
                pass
            if arma[i][j] == "#":
                stdscr.addstr(y,x,arma[i][j], COR5)
            else:
                pass
            if arma[i][j] == "^":
                stdscr.addstr(y,x,arma[i][j], COR4)
            else:
                pass
            if arma[i][j] == "=":
                stdscr.addstr(y,x,arma[i][j], COR3)
            else:
                pass
            if arma[i][j] == ">":
                stdscr.addstr(y,x,arma[i][j], COR1)
            else:
                pass
        stdscr.refresh()
###############

#### MENU #####
def print_menu(win, selected_opcoes_idx):
    menu = ['map 1', 'map 2', 'options', 'exit']    

    win.clear()

    #win.addstr(0, 0, "start of print menu, idx =" + str(selected_opcoes_idx))
    #curses.napms(1000)
    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
    BLACK_AND_WHITE = curses.color_pair(1)
   
    h, w = win.getmaxyx()

    for idx, opcoes in enumerate(menu):
        x = w//2 - len(opcoes)//2
        y = h//2 - len(menu)//2 + idx
        if idx == selected_opcoes_idx:
            win.attron(BLACK_AND_WHITE)
            win.addstr(y, x, opcoes)
            win.attroff(BLACK_AND_WHITE)
        else: 
            win.addstr(y, x, opcoes)

    win.refresh()


def menu(win):
    menu = ['map 1', 'map 2', 'options', 'exit']

    opcaoAtual_opcoes_idx = 0
    
    key = 0
    while 1: 
        print_menu(win, opcaoAtual_opcoes_idx)
        key = win.getch()

        win.clear()

        if key == curses.KEY_UP and opcaoAtual_opcoes_idx > 0:
            opcaoAtual_opcoes_idx -= 1
        elif key == curses.KEY_DOWN and opcaoAtual_opcoes_idx < len(menu)-1:
            opcaoAtual_opcoes_idx += 1
        elif key == curses.KEY_ENTER or key in [10, 13]:
            #win.addstr(0, 0, "voce selecionou {}".format(menu[opcaoAtual_opcoes_idx]))
            #win.refresh()
            #win.getch()
            #if opcaoAtual_opcoes_idx == len(menu)-1:
            #    break
            return opcaoAtual_opcoes_idx

        print_menu(win, opcaoAtual_opcoes_idx)

        win.refresh()
###############

if __name__ == "__main__":
   wrapper(main)
   









